@page "/todo-list"
@inject HttpClient Http;
@using ToDo.Client.ViewModel;
@using ToDo.Models;

<h1>ToDo List</h1>

@if (toDos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var toDo in toDos)
            {
                <tr>
                    @if(@toDo?.Completed == true){
                        <td class="todo-completed">@toDo.Title</td>
                    }else{
                        <td>@toDo.Title</td>
                    }

                    <td @onclick="@(()=>@UpdateToDo(@toDo))" class="icon-column">
                        <span class="oi oi-check" aria-hidden="true"></span>
                    </td>
                    
                    <td @onclick="@(()=>@DeleteToDo(@toDo.Id))" class="icon-column">
                        <span class="oi oi-trash" aria-hidden="true"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    IList<ToDoModel> toDos;

    public readonly string baseUrl = new BaseUrl().Url;

    protected override async Task OnInitAsync()
    {
        toDos = await Http.GetJsonAsync<IList<ToDoModel>>(baseUrl + "todo");
    }

    async Task DeleteToDo(int Id) 
    {
        await Http.DeleteAsync(baseUrl + "todo?id=" + Id);
        
        toDos = toDos.Where(i=>i.Id != Id).ToList();
    }

    async Task UpdateToDo(ToDoModel toDo)
    {
        toDo.Completed = !toDo.Completed;
        await Http.PutJsonAsync(baseUrl + "todo", toDo);
    }
}

@page "/todo-list"
@inject HttpClient Http;
@using ToDo.Client.ViewModel;
@using ToDo.Models;

<h1>ToDo List</h1>

@if (ToDos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var ToDo in ToDos)
            {
                <ToDoItem 
                    ToDo="@ToDo" 
                    OnCheck="@(()=>@UpdateToDo(@ToDo))"   
                    OnDelete="@(()=>@DeleteToDo(@ToDo.Id))" 
                />
            }
        </tbody>
    </table>
}

@code {
    IList<ToDoModel> ToDos;

    public readonly string baseUrl = new BaseUrl().Url;

    protected override async Task OnInitAsync()
    {
        ToDos = await Http.GetJsonAsync<IList<ToDoModel>>(baseUrl + "todo");
    }

    async Task DeleteToDo(int Id) 
    {
        await Http.DeleteAsync(baseUrl + "todo?id=" + Id);
        
        ToDos = ToDos.Where(i=>i.Id != Id).ToList();
    }

    async Task UpdateToDo(ToDoModel ToDo)
    {
        ToDo.Completed = !ToDo.Completed;
        await Http.PutJsonAsync(baseUrl + "todo", ToDo);
    }
}
